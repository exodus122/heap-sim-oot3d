# coding=utf-8

import struct
import json
import pprint
import os.path

###################
#export actor data#
###################
actorList = [
	["Player", "Player"],
	["unset", ""],
	["En_Test", "Stalfos"],
	["unset", ""],
	["En_GirlA", "Shop Inventory Data"],
	["unset", ""],
	["unset", ""],
	["En_Part", "?: En_Part"],
	["En_Light", "Flame"],
	["En_Door", "Wooden Door"],
	["En_Box", "Treasure Chest"],
	["Bg_Dy_Yoseizo", "Great Fairy"],
	["Bg_Hidan_Firewall", "Proximity-Activated Firewall"],
	["En_Poh", "Graveyard Poe & Composer Brothers"],
	["En_Okuta", "Octorok"],
	["Bg_Ydan_Sp", "Spiderweb"],
	["En_Bom", "Bomb Field Model"],
	["En_Wallmas", "Wallmaster"],
	["En_Dodongo", "Dodongo"],
	["En_Firefly", "Keese"],
	["En_Horse", "Adult Epona"],
	["En_Item00", "Collectible Items (Visible)"],
	["En_Arrow", "?: En_Arrow"],
	["unset", ""],
	["En_Elf", "Navi & Healing Fairy"],
	["En_Niw", "Friendly Cucco"],
	["unset", ""],
	["En_Tite", "Tektite"],
	["En_Reeba", "Leever"],
	["En_Peehat", "Peahat"],
	["En_Butte", "Butterfly"],
	["unset", ""],
	["En_Insect", "Bug"],
	["En_Fish", "Fish"],
	["unset", ""],
	["En_Holl", "Room Transition Plane"],
	["En_Scene_Change", "?: En_Scene_Change"],
	["En_Zf", "Lizalfos & Dinalfos"],
	["En_Hata", "Flagpole"],
	["Boss_Dodongo", "King Dodongo"],
	["Boss_Goma", "Gohma"],
	["En_Zl1", "Child Zelda (Cutscene 05 & 06)"],
	["En_Viewer", "?: En_Viewer"],
	["En_Goma", "Gohma Larva"],
	["Bg_Pushbox", "?: Bg_Pushbox"],
	["En_Bubble", "Shabom"],
	["Door_Shutter", "Door Shutter"],
	["En_Dodojr", "Baby Dodongo"],
	["En_Bdfire", "King Dodongo's Fire"],
	["unset", ""],
	["En_Boom", "Boomerang Field Model"],
	["En_Torch2", "Dark Link"],
	["En_Bili", "Biri"],
	["En_Tp", "Tailpasaran"],
	["unset", ""],
	["En_St", "Skulltula"],
	["En_Bw", "Torch Slug"],
	["En_A_Obj", "Directional Sign & Square Sign [Early]"],
	["En_Eiyer", "Land Stinger"],
	["En_River_Sound", "Sound Effects I"],
	["En_Horse_Normal", "Generic Horse"],
	["En_Ossan", "?: En_Ossan"],
	["Bg_Treemouth", "Deku Tree's Jaw"],
	["Bg_Dodoago", "Dead Dodongo's Jaw"],
	["Bg_Hidan_Dalm", "Fire Temple Breakable Hammer Block"],
	["Bg_Hidan_Hrock", "Fire Temple Hammer-Activated Elevator Pillar"],
	["En_Horse_Ganon", "Ganondorf's Horse"],
	["Bg_Hidan_Rock", "Fire Temple Fire-Powered Elevator Block"],
	["Bg_Hidan_Rsekizou", "Fire Temple Rotating Fire Spinner"],
	["Bg_Hidan_Sekizou", "Fire Temple Flame-Spouting Statue"],
	["Bg_Hidan_Sima", "Fire Temple Clover Platform"],
	["Bg_Hidan_Syoku", "Fire Temple Fire-Powered Mini-Boss Room Face Elevator"],
	["En_Xc", "Sheik"],
	["Bg_Hidan_Curtain", "Circle of Flames"],
	["Bg_Spot00_Hanebasi", "Drawbridge"],
	["En_Mb", "Moblin"],
	["En_Bombf", "Bomb Flower"],
	["En_Zl2", "Adult Zelda (Cutscenes)"],
	["Bg_Hidan_Fslift", "Hookshot Elevator"],
	["En_OE2", "Kokiri Girl [Early]"],
	["Bg_Ydan_Hasi", "?: Bg_Ydan_Hasi"],
	["Bg_Ydan_Maruta", "Deku Tree Spiked Log & Dropdown Ladder"],
	["Boss_Ganondrof", "Phantom Ganon"],
	["unset", ""],
	["En_Am", "Armos"],
	["En_Dekubaba", "Deku Baba"],
	["En_M_Fire1", "Deku Nut Effect"],
	["En_M_Thunder", "Spin Attack Effects"],
	["Bg_Ddan_Jd", "Dodongo's Cavern Elevator Platform"],
	["Bg_Breakwall", "Bombable Wall"],
	["En_Jj", "Jabu-Jabu"],
	["En_Horse_Zelda", "Zelda's Horse"],
	["Bg_Ddan_Kd", "Dodongo's Cavern Bombable Stairs"],
	["Door_Warp1", "Blue Warp & Rupee-Shaped Prism"],
	["Obj_Syokudai", "Torch Stand (Generic)"],
	["Item_B_Heart", "Heart Container"],
	["En_Dekunuts", "Mad Scrub"],
	["Bg_Menkuri_Kaiten", "Rotating Ring"],
	["Bg_Menkuri_Eye", "Statue Eye Targets"],
	["En_Vali", "Bari"],
	["Bg_Mizu_Movebg", "?: Bg_Mizu_Movebg"],
	["Bg_Mizu_Water", "Water Temple Water"],
	["Arms_Hook", "Hookshot Field Model"],
	["En_fHG", "Phantom Ganon's Horse"],
	["Bg_Mori_Hineri", "Forest Temple Twisting Corridor"],
	["En_Bb", "Bubble"],
	["Bg_Toki_Hikari", "Temple of Time Window Light Rays"],
	["En_Yukabyun", "Flying Floor Tile"],
	["Bg_Toki_Swd", "Master Sword"],
	["En_Fhg_Fire", "Phantom Ganon's Lightning"],
	["Bg_Mjin", "Warp Pad & Ocarina Pedestal"],
	["Bg_Hidan_Kousi", "Metal Bars"],
	["Door_Toki", "Door of Time Collision Model"],
	["Bg_Hidan_Hamstep", "Hammer-Activated Steps"],
	["En_Bird", "Brown Bird"],
	["unset", ""],
	["unset", ""],
	["unset", ""],
	["unset", ""],
	["En_Wood02", "Trees & Bushes"],
	["unset", ""],
	["unset", ""],
	["unset", ""],
	["unset", ""],
	["En_Lightbox", "Grey Rectangular Block"],
	["En_Pu_box", "Grey Rectangular Stone Block"],
	["unset", ""],
	["unset", ""],
	["En_Trap", "Blade Trap"],
	["En_Arow_Trap", "Arrow-Deflecting Trap"],
	["En_Vase", "Orange Pot"],
	["unset", ""],
	["En_Ta", "Talon"],
	["En_Tk", "Damp√©"],
	["Bg_Mori_Bigst", "Forest Temple Bow Room Platform"],
	["Bg_Mori_Elevator", "Forest Temple Sun Elevator"],
	["Bg_Mori_Kaitenkabe", "Forest Temple Rotating Pre-Boss Room"],
	["Bg_Mori_Rakkatenjo", "Forest Temple Collapsing Checkerboard Ceiling"],
	["En_Vm", "Beamos"],
	["Demo_Effect", "?: Demo_Effect"],
	["Demo_Kankyo", "?: Demo_Kankyo"],
	["Bg_Hidan_Fwbig", "Fire Temple Big Fire Wall"],
	["En_Floormas", "Floormaster"],
	["En_Heishi1", "Soldier (Castle Hedge Maze)"],
	["En_Rd", "Redead & Gibdo"],
	["En_Po_Sisters", "?: En_Po_Sisters"],
	["Bg_Heavy_Block", "Golden Gauntlets Rock"],
	["Bg_Po_Event", "?: Bg_Po_Event"],
	["Obj_Mure", "Group of Bugs / Fish / Butterflies"],
	["En_Sw", "Skullwalltula"],
	["Boss_Fd", "Volvagia (Flying)"],
	["Object_Kankyo", "?: Object_Kankyo"],
	["En_Du", "Darunia"],
	["En_Fd", "Flare Dancer"],
	["En_Horse_Link_Child", "Child Epona"],
	["Door_Ana", "Grotto Hole"],
	["Bg_Spot02_Objects", "Graveyard Objects"],
	["Bg_Haka", "Gravestone"],
	["Magic_Wind", "Farore's Wind Effect"],
	["Magic_Fire", "Din's Fire Effect"],
	["unset", ""],
	["En_Ru1", "Child Ruto"],
	["Boss_Fd2", "Volvagia (Whack-a-Mole)"],
	["En_Fd_Fire", "Flare Dancer's Fireball"],
	["En_Dh", "Dead Hand"],
	["En_Dha", "Dead Hand's Hands"],
	["En_Rl", "Rauru"],
	["En_Encount1", "Enemy Spawner"],
	["Demo_Du", "Darunia"],
	["Demo_Im", "Impa"],
	["Demo_Tre_Lgt", "Treasure Chest Glow"],
	["En_Fw", "Flare Dancer Core"],
	["Bg_Vb_Sima", "Volvagia's Sinking Platform"],
	["En_Vb_Ball", "Volvagia's Rock Attack"],
	["Bg_Haka_Megane", "?: Bg_Haka_Megane"],
	["Bg_Haka_MeganeBG", "Invisible Wall"],
	["Bg_Haka_Ship", "Charon's Boat"],
	["Bg_Haka_Sgami", "Spinning Scythes"],
	["unset", ""],
	["En_Heishi2", "Soldier (Castle Gate / Zelda's Courtyard / Kakariko Village)"],
	["En_Encount2", "Falling Boulder Spawner"],
	["En_Fire_Rock", "Flaming Debris"],
	["En_Brob", "Stunnable Jelly Platform"],
	["Mir_Ray", "Reflectable Ray of Light"],
	["Bg_Spot09_Obj", "Gerudo Valley Objects"],
	["Bg_Spot18_Obj", "Goron City Objects"],
	["Boss_Va", "Barinade"],
	["Bg_Haka_Tubo", "Shadow Temple Flaming Skull Vase"],
	["Bg_Haka_Trap", "Shadow Temple Guillotine"],
	["Bg_Haka_Huta", "Shadow Temple Coffin Lid"],
	["Bg_Haka_Zou", "?: Bg_Haka_Zou"],
	["Bg_Spot17_Funen", "Death Mountain Crater Smoke Plume"],
	["En_Syateki_Itm", "Shooting Gallery Items"],
	["En_Syateki_Man", "Shooting Gallery Proprietor"],
	["En_Tana", "Shop Shelves"],
	["En_Nb", "Nabooru"],
	["Boss_Mo", "Morpha"],
	["En_Sb", "Shellblade"],
	["En_Bigokuta", "Big Octorok"],
	["En_Karebaba", "Wilted Deku Baba"],
	["Bg_Bdan_Objects", "Inside Jabu-Jabu's Belly Objects"],
	["Demo_Sa", "Saria (Cutscenes)"],
	["Demo_Go", "Generic Goron (Cutscenes)"],
	["En_In", "Ingo"],
	["En_Tr", "Kotake & Koume"],
	["Bg_Spot16_Bombstone", "Dodongo's Cavern Boulder Blockade"],
	["unset", ""],
	["Bg_Hidan_Kowarerukabe", "Bombable Wall & Cracked Floor (Fire Temple)"],
	["Bg_Bombwall", "Bombable Wall (Death Mountain Trail)"],
	["Bg_Spot08_Iceblock", "Drifting Ice Platform"],
	["En_Ru2", "Adult Ruto"],
	["Obj_Dekujr", "Deku Tree Sprout"],
	["Bg_Mizu_Uzu", "Water Current"],
	["Bg_Spot06_Objects", "Lake Hylia Objects"],
	["Bg_Ice_Objects", "Ice Cavern Objects"],
	["Bg_Haka_Water", "Bottom of the Well Moat Water"],
	["unset", ""],
	["En_Ma2", "Adult Malon (Stable & Lon Lon Ranch - Ingo Ousted)"],
	["En_Bom_Chu", "Bombchu Field Model"],
	["En_Horse_Game_Check", "?: En_Horse_Game_Check"],
	["Boss_Tw", "Twinrova"],
	["En_Rr", "Like Like"],
	["En_Ba", "Parasitic Tentacle"],
	["En_Bx", "Tentacle Obstruction"],
	["En_Anubice", "Anubis"],
	["En_Anubice_Fire", "Anubis-Killing Fire Trap"],
	["Bg_Mori_Hashigo", "Forest Temple Dropdown Ladder"],
	["Bg_Mori_Hashira4", "Forest Temple Rotating Lava Room Platforms"],
	["Bg_Mori_Idomizu", "Forest Temple Well Path Water"],
	["Bg_Spot16_Doughnut", "Death Mountain Cloud Ring"],
	["Bg_Bdan_Switch", "Jabu-Jabu's Belly Switch"],
	["En_Ma1", "Child Malon"],
	["Boss_Ganon", "Ganondorf"],
	["Boss_Sst", "Bongo Bongo"],
	["unset", ""],
	["unset", ""],
	["En_Ny", "Spike Trap"],
	["En_Fr", "Frog"],
	["Item_Shield", "Collectible Deku Shield"],
	["Bg_Ice_Shelter", "Meltable Ice Covering"],
	["En_Ice_Hono", "Blue Fire"],
	["Item_Ocarina", "Collectible Ocarina of Time"],
	["unset", ""],
	["unset", ""],
	["Magic_Dark", "Nayru's Love Effect"],
	["Demo_6K", "Sage Light Orbs"],
	["En_Anubice_Tag", "Anubis Spawner"],
	["Bg_Haka_Gate", "?: Bg_Haka_Gate"],
	["Bg_Spot15_Saku", "Hyrule Castle Gate"],
	["Bg_Jya_Goroiwa", "Rolling Boulder (Spirit Temple)"],
	["Bg_Jya_Zurerukabe", "Spirit Temple Shifting Wall"],
	["unset", ""],
	["Bg_Jya_Cobra", "Snake Statue"],
	["Bg_Jya_Kanaami", "Mesh Bridge"],
	["Fishing", "Fishing Pond & Proprietor"],
	["Obj_Oshihiki", "Pushblock"],
	["Bg_Gate_Shutter", "Gate to Death Mountain Trail"],
	["Eff_Dust", "Dust Particles"],
	["Bg_Spot01_Fusya", "Kakariko Village Windmill Blades"],
	["Bg_Spot01_Idohashira", "Kakariko Village Well Crossbeam"],
	["Bg_Spot01_Idomizu", "Kakariko Village Well Water"],
	["Bg_Po_Syokudai", "Torch Stand (Poe Sisters)"],
	["Bg_Ganon_Otyuka", "Ganondorf's Lair Floor Tile"],
	["Bg_Spot15_Rrbox", "Lon Lon Milk Crate"],
	["Bg_Umajump", "Horse Jumping Fence"],
	["unset", ""],
	["Arrow_Fire", "Collectible Fire Arrows"],
	["Arrow_Ice", "Collectible Ice Arrows"],
	["Arrow_Light", "Collectible Light Arrows"],
	["unset", ""],
	["unset", ""],
	["Item_Etcetera", "Collectible Quest Items"],
	["Obj_Kibako", "Small Wooden Crate"],
	["Obj_Tsubo", "Pot"],
	["En_Wonder_Item", "Collectible Field Items (Invisible)"],
	["En_Ik", "Iron Knuckle (Field Enemy)"],
	["Demo_Ik", "Iron Knuckle (Cutscenes)"],
	["En_Skj", "Skullkid"],
	["En_Skjneedle", "Skullkid's Needle"],
	["En_G_Switch", "Silver Rupee"],
	["Demo_Ext", "Kotake & Koume's Portal"],
	["Demo_Shd", "Bongo Bongo's Shadow"],
	["En_Dns", "Business Scrub (Surrendered)"],
	["Elf_Msg", "Navi Message (Automatically Triggered)"],
	["En_Honotrap", "Flame-Shooting Eye Switch"],
	["En_Tubo_Trap", "Flying Pot"],
	["Obj_Ice_Poly", "?: Obj_Ice_Poly"],
	["Bg_Spot03_Taki", "Zora's River Waterfall"],
	["Bg_Spot07_Taki", "Zora's Domain Waterfall"],
	["En_Fz", "Freezard"],
	["En_Po_Relay", "Damp√©'s Ghost"],
	["Bg_Relay_Objects", "Damp√©'s Relay Objects"],
	["En_Diving_Game", "Diving Game Zora"],
	["En_Kusa", "Grass Clump & Regenerating Grass"],
	["Obj_Bean", "Bean Planting Spot"],
	["Obj_Bombiwa", "Bombable Boulder"],
	["unset", ""],
	["unset", ""],
	["Obj_Switch", "Bronze / Diamond / Eye Switch"],
	["Obj_Elevator", "Stone Elevator"],
	["Obj_Lift", "Deku Tree Elevator"],
	["Obj_Hsblock", "Hookshot Target Pillar"],
	["En_Okarina_Tag", "Ocarina Spot"],
	["En_Yabusame_Mark", "?: En_Yabusame_Mark"],
	["En_Goroiwa", "Rolling Boulder (Generic)"],
	["En_Ex_Ruppy", "Deku Target Game Rupee"],
	["En_Toryo", "Carpenter Boss"],
	["En_Daiku", "Carpenter (Thieves' Hideout & Carpenters' Tent)"],
	["unset", ""],
	["En_Nwc", "Cucco Chick"],
	["En_Blkobj", "Dark Link's Illusion Room"],
	["Item_Inbox", "?: Item_Inbox"],
	["En_Ge1", "Gerudo in White"],
	["Obj_Blockstop", "?: Obj_Blockstop"],
	["En_Sda", "Dynamic Shadow"],
	["En_Clear_Tag", "Arwing"],
	["En_Niw_Lady", "Cucco Lady"],
	["En_Gm", "Medigoron"],
	["En_Ms", "Magic Bean Seller"],
	["En_Hs", "Carpenter Boss's Son (Lost Woods)"],
	["Bg_Ingate", "Gate to Ingo's Ranch"],
	["En_Kanban", "Square Sign"],
	["En_Heishi3", "Soldier (Hyrule Castle)"],
	["En_Syateki_Niw", "?: En_Syateki_Niw"],
	["En_Attack_Niw", "Cucco (Attacking)"],
	["Bg_Spot01_Idosoko", "Well Stopper"],
	["En_Sa", "Saria (Gameplay)"],
	["En_Wonder_Talk", "Checkable Green Navi Spot"],
	["Bg_Gjyo_Bridge", "Rainbow Bridge"],
	["En_Ds", "Potion Shop Granny"],
	["En_Mk", "Lake Scientist"],
	["En_Bom_Bowl_Man", "Bombchu Bowling Alley Employee"],
	["En_Bom_Bowl_Pit", "?: En_Bom_Bowl_Pit"],
	["En_Owl", "Kaepora Gaebora"],
	["En_Ishi", "Silver Gauntlets Boulder"],
	["Obj_Hana", "Graveyard Flower / Rock & Grass Pulled by Kokiri"],
	["Obj_Lightswitch", "Sun Switch"],
	["Obj_Mure2", "Groups of Rocks & Grass Clumps"],
	["En_Go", "Generic Goron [Early]"],
	["En_Fu", "Windmill Man"],
	["unset", ""],
	["En_Changer", "Treasure Chest (Treasure Chest Shop)"],
	["Bg_Jya_Megami", "Goddess Statue"],
	["Bg_Jya_Lift", "Ceiling Elevator"],
	["Bg_Jya_Bigmirror", "Ceiling Mirror"],
	["Bg_Jya_Bombchuiwa", "Bombable Bombchu Boulder"],
	["Bg_Jya_Amishutter", "Hookshot Grate"],
	["Bg_Jya_Bombiwa", "?: Bg_Jya_Bombiwa"],
	["Bg_Spot18_Basket", "Spinning Goron Vase"],
	["unset", ""],
	["En_Ganon_Organ", "Ganondorf's Organ"],
	["En_Siofuki", "Small Water Spout"],
	["En_Stream", "Big Water Spout"],
	["unset", ""],
	["En_Mm", "Running Man (Hyrule Field & Ending)"],
	["En_Ko", "Kokiri Spawner"],
	["En_Kz", "King Zora"],
	["En_Weather_Tag", "Weather-Changing Tag"],
	["Bg_Sst_Floor", "Bongo Bongo's Drum Head"],
	["En_Ani", "Man on Kakariko Rooftop"],
	["En_Ex_Item", "Bombchu Bowling Prizes"],
	["Bg_Jya_Ironobj", "Iron Knuckle Throne & Columns"],
	["En_Js", "Carpet Merchant"],
	["En_Jsjutan", "Carpet Merchant's Magic Carpet"],
	["En_Cs", "Graveyard Boy"],
	["En_Md", "Mido"],
	["En_Hy", "Hylian Spawner"],
	["En_Ganon_Mant", "Ganondorf's Cape"],
	["En_Okarina_Effect", "Song of Storms Effect"],
	["En_Mag", "Title Screen Overlay"],
	["Door_Gerudo", "Thieves' Hideout Cell Door"],
	["Elf_Msg2", "Navi Message (Targetable)"],
	["Demo_Gt", "Ganon's Tower Exterior (Collapsing) Objects"],
	["En_Po_Field", "Big Poe"],
	["Efc_Erupc", "Death Mountain Eruption Effects"],
	["Bg_Zg", "Gate Barring Escape From Ganon's Tower"],
	["En_Heishi4", "Soldier (Hyrule Castle Town & Kakariko Village)"],
	["En_Zl3", "Adult Zelda (Normal Gameplay)"],
	["Boss_Ganon2", "Ganon"],
	["En_Kakasi", "Pierre (Lake Hylia)"],
	["En_Takara_Man", "Treasure Chest Shop Proprietor"],
	["Obj_Makeoshihiki", "Make Pushblock"],
	["Oceff_Spot", "Sun's Song Effect"],
	["End_Title", "Ending Overlays"],
	["unset", ""],
	["En_Torch", "Grotto Treasure Chest"],
	["Demo_Ec", "Ending Cutscene NPCs"],
	["Shot_Sun", "Fire Arrow Trigger & Big Fairy"],
	["En_Dy_Extra", "Great Fairy's Healing Beam"],
	["En_Wonder_Talk2", "Checkable Spot"],
	["En_Ge2", "Patrolling Gerudo in Purple"],
	["Obj_Roomtimer", "Room Timer"],
	["En_Ssh", "Skulltula House Resident (Cursed)"],
	["En_Sth", "Skulltula House Resident (Curse Lifted)"],
	["Oceff_Wipe", "Lullaby / Song of Time Effect"],
	["Oceff_Storm", "Song of Storms Effect"],
	["En_Weiyer", "Stinger (Water)"],
	["Bg_Spot05_Soko", "Sacred Forest Meadow Pond Bottom"],
	["Bg_Jya_1flift", "Spirit Temple Entrance Room Elevator"],
	["Bg_Jya_Haheniron", "Iron Knuckle Debris"],
	["Bg_Spot12_Gate", "Gate to the Haunted Wasteland"],
	["Bg_Spot12_Saku", "Gate to the Gerudo Training Ground"],
	["En_Hintnuts", "Deku Scrub (Inside the Deku Tree)"],
	["En_Nutsball", "Deku Scrub Projectile"],
	["Bg_Spot00_Break", "Broken Drawbridge"],
	["En_Shopnuts", "Business Scrub (Attacking)"],
	["En_It", "Collectable Grave-Digging Game Items"],
	["En_GeldB", "Gerudo Fighter"],
	["Oceff_Wipe2", "Epona's Song Effect"],
	["Oceff_Wipe3", "Saria's Song Effect"],
	["En_Niw_Girl", "Cucco-Chasing Girl"],
	["En_Dog", "Dog"],
	["En_Si", "Gold Skulltula Token"],
	["Bg_Spot01_Objects2", "Kakariko Village Objects"],
	["Obj_Comb", "Beehive"],
	["Bg_Spot11_Bakudankabe", "Bombable Wall (Desert Colossus)"],
	["Obj_Kibako2", "Large Wooden Crate"],
	["En_Dnt_Demo", "Forest Stage Actor Spawner"],
	["En_Dnt_Jiji", "Forest Stage Judge"],
	["En_Dnt_Nomal", "Deku Scrub (Deku Target Game)"],
	["En_Guest", "Happy Mask Shop Customer"],
	["Bg_Bom_Guard", "Bombchu Bowling Alley Walls"],
	["En_Hs2", "Carpenter Boss's Son (Kakariko Village)"],
	["Demo_Kekkai", "Ganon's Castle Barrier"],
	["Bg_Spot08_Bakudankabe", "Zora's Fountain Bombable Wall"],
	["Bg_Spot17_Bakudankabe", "Death Mountain Crater Bombable Wall"],
	["unset", ""],
	["Obj_Mure3", "Group of Rupees"],
	["En_Tg", "Honey & Darling"],
	["En_Mu", "Haggling Shoppers"],
	["En_Go2", "Generic Goron & Biggoron"],
	["En_Wf", "Wolfos"],
	["En_Skb", "Stalchild"],
	["Demo_Gj", "Ganon's Lair Rubble"],
	["Demo_Geff", "Ganon's Lair Rubble Fragment"],
	["Bg_Gnd_Firemeiro", "Fire Trial Sinking Zig-Zag Platform"],
	["Bg_Gnd_Darkmeiro", "Shadow Trial Invisible Path"],
	["Bg_Gnd_Soulmeiro", "?: Bg_Gnd_Soulmeiro"],
	["Bg_Gnd_Nisekabe", "Ganon's Castle Fake Wall"],
	["Bg_Gnd_Iceblock", "Water Trial Ice Pushblock"],
	["En_Gb", "Poe Collector"],
	["En_Gs", "Gossip Stone"],
	["Bg_Mizu_Bwall", "Water Temple Bombable Wall"],
	["Bg_Mizu_Shutter", "Water Temple Gate"],
	["En_Daiku_Kakariko", "Kakariko Village - Carpenter"],
	["Bg_Bowl_Wall", "Bombchu Bowling Alley Walls"],
	["En_Wall_Tubo", "?: En_Wall_Tubo"],
	["En_Po_Desert", "Poe Guide"],
	["En_Crow", "Guay"],
	["Door_Killer", "Door Mimic"],
	["Bg_Spot11_Oasis", "Oasis Water"],
	["Bg_Spot18_Futa", "Spinning Goron Vase Lid"],
	["Bg_Spot18_Shutter", "Door to Darunia's Room"],
	["En_Ma3", "Adult Malon (Day)"],
	["En_Cow", "Cow"],
	["Bg_Ice_Turara", "Icicle"],
	["Bg_Ice_Shutter", "Ice Cavern Bars"],
	["En_Kakasi2", "Pierre (Wandering)"],
	["En_Kakasi3", "Bonooru"],
	["Oceff_Wipe4", "Scarecrow's Song Effect"],
	["En_Eg", "?: En_Eg"],
	["Bg_Menkuri_Nisekabe", "Gerudo Training Ground Fake Wall"],
	["En_Zo", "Zora"],
	["Obj_Makekinsuta", "Gold Skulltula Spawner"],
	["En_Ge3", "Nabooru's Second-in-Command"],
	["Obj_Timeblock", "Time Block"],
	["Obj_Hamishi", "Breakable Bronze Boulder"],
	["En_Zl4", "Child Zelda (Gameplay & Cutscene 04)"],
	["En_Mm2", "Running Man (Carpenters' Tent & Race)"],
	["Bg_Jya_Block", "Silver Gauntlets Pushblock [?]"],
	["Obj_Warp2block", "Time Block"],
	["Bg_Ydan_*", "Deku Tree vertical web wall on top floor"],
	["Boss_Ganon*", "?: Boss_Ganon*"],
	["En_Hintstone", "Sheikah Stone"],
	["Bg_Mizu_*", "?: Bg_Mizu_*"]
]

actor_strings_search = [
	"\x84\xbf\x1e\x00\xc4\xc0\x1e\x00",
	"\xb4\x96\x20\x00\xcc\x98\x20\x00",
	"\x28\xc1\x1e\x00\x40\xc3\x1e\x00",
	"\x68\x08\x22\x00\x80\x0a\x22\x00",
	"\x70\x97\x28\x00\x88\x9a\x28\x00",
	"\x08\x65\x27\x00\xb8\x67\x27\x00",
	"\x98\xf8\x23\x00\x28\xf9\x23\x00",
	"\xb4\x0a\x22\x00\xa4\x0d\x22\x00",
	"\x40\xf9\x23\x00\x80\xfa\x23\x00",
	"\xb0\xfa\x23\x00\x00\xfc\x23\x00",
	"\x00\x99\x20\x00\xc0\x99\x20\x00",
	"\xf0\x99\x20\x00\xec\x9a\x20\x00",
	"\x2c\x9b\x20\x00\x94\x9c\x20\x00",
	"\x10\xdd\x25\x00\x28\xde\x25\x00",
	"\x50\xa4\x28\x00\x88\xa5\x28\x00",
	"\xd4\xa5\x28\x00\xd8\xa6\x28\x00",
	"\x8c\x69\x27\x00\x7c\x6a\x27\x00",
	"\xb4\xa3\x29\x00\x9c\xa6\x29\x00",
	"\xfc\xa6\x29\x00\xc0\xa7\x29\x00",
	"\x08\xa7\x28\x00\x18\xa8\x28\x00",
	"\x48\xa8\x28\x00\xe8\xa8\x28\x00",
	"\xfc\xa7\x29\x00\xa0\xa9\x29\x00",
	"\xd0\x60\x1a\x00\x90\x61\x1a\x00",
	"\x70\xfe\x23\x00\xd0\x01\x24\x00",
	"\x54\x02\x24\x00\x28\x03\x24\x00",
	"\xbc\x6e\x27\x00\x3c\x6f\x27\x00",
	"\xd0\xa9\x29\x00\xf4\xab\x29\x00",
	"\xd8\xde\x25\x00\x4c\xe1\x25\x00",
	"\x58\x03\x24\x00\xdc\x04\x24\x00",
	"\x2c\x05\x24\x00\x48\x08\x24\x00",
	"\xdc\x08\x24\x00\xf4\x0a\x24\x00",
	"\x9c\xe1\x25\x00\x04\xe3\x25\x00",
	"\x20\x0e\x22\x00\x78\x10\x22\x00",
	"\xc0\x76\x27\x00\xdc\x79\x27\x00",
	"\xc8\xae\x29\x00\xa0\xb1\x29\x00",
	"\x8c\xe3\x25\x00\x94\xe4\x25\x00",
	"\x54\xba\x2a\x00\x34\xbb\x2a\x00",
	"\x14\xae\x28\x00\x10\xaf\x28\x00",
	"\x2c\x7a\x27\x00\x90\x7c\x27\x00",
	"\xcc\xb4\x29\x00\xf0\xb8\x29\x00",
	"\xb8\x7c\x27\x00\xcc\x7f\x27\x00",
	"\x0c\x80\x27\x00\x78\x81\x27\x00",
	"\x30\x48\x39\x00\xdc\x49\x39\x00",
	"\xd8\xe4\x25\x00\x94\xe6\x25\x00",
	"\x24\xbc\x2a\x00\xbc\xbe\x2a\x00",
	"\xe8\xb9\x29\x00\xd0\xbc\x29\x00",
	"\xe8\xe6\x25\x00\xf0\xe8\x25\x00",
	"\xa8\x81\x27\x00\x54\x82\x27\x00",
	"\x84\x82\x27\x00\x50\x83\x27\x00",
	"\x80\x83\x27\x00\x6c\x87\x27\x00",
	"\xfc\x87\x27\x00\x70\x89\x27\x00",
	"\x50\xe9\x25\x00\x4c\xea\x25\x00",
	"\x38\xc4\x1e\x00\x4c\xc5\x1e\x00",
	"\x8c\xea\x25\x00\x00\xec\x25\x00",
	"\x30\xbf\x2a\x00\xc0\xbf\x2a\x00",
	"\xac\xc0\x29\x00\x1c\xc2\x29\x00",
	"\x48\x0b\x24\x00\x08\x0c\x24\x00",
	"\xf0\xbf\x2a\x00\xf8\xc1\x2a\x00",
	"\x14\x8a\x27\x00\xe0\x8a\x27\x00",
	"\x38\x0c\x24\x00\xa0\x10\x24\x00",
	"\xec\x97\x27\x00\x00\x99\x27\x00",
	"\xb4\xc6\x29\x00\x9c\xc7\x29\x00",
	"\x28\x99\x27\x00\x38\x9a\x27\x00",
	"\x78\x9a\x27\x00\x38\x9b\x27\x00",
	"\x18\x11\x22\x00\x28\x12\x22\x00",
	"\x64\xed\x25\x00\x34\xef\x25\x00",
	"\x74\xc2\x2a\x00\x68\xc3\x2a\x00",
	"\x68\x9b\x27\x00\x18\x9c\x27\x00",
	"\xb8\xc3\x2a\x00\x70\xc4\x2a\x00",
	"\x3c\x30\x38\x00\x88\x30\x38\x00",
	"\xc4\xef\x25\x00\x64\xf7\x25\x00",
	"\x40\x9c\x27\x00\xbc\xa1\x27\x00",
	"\x84\x31\x3a\x00\xe8\x31\x3a\x00",
	"\xdc\xbc\x28\x00\x2c\xc0\x28\x00",
	"\x74\x12\x22\x00\xf0\x12\x22\x00",
	"\xb0\xf7\x25\x00\x78\xfa\x25\x00",
	"\xc4\x61\x1a\x00\x20\x62\x1a\x00",
	"\x84\xfa\x25\x00\x88\xfb\x25\x00",
	"\x1c\xcf\x29\x00\x14\xd0\x29\x00",
	"\xd8\xc2\x28\x00\x14\xc5\x28\x00",
	"\x68\xd0\x29\x00\xf8\xd1\x29\x00",
	"\x54\xa2\x27\x00\x30\xa4\x27\x00",
	"\x70\xc5\x28\x00\xcc\xc6\x28\x00",
	"\x68\xac\x37\x00\x28\xad\x37\x00",
	"\x58\xad\x37\x00\x2c\xae\x37\x00",
	"\x08\x13\x22\x00\x9c\x18\x22\x00",
	"\x80\xa4\x27\x00\x0c\xa7\x27\x00",
	"\xf4\xd8\x29\x00\x38\xdb\x29\x00",
	"\xf4\xc6\x28\x00\xcc\xc7\x28\x00",
	"\xdc\xae\x37\x00\x24\xb3\x37\x00",
	"\x00\xc8\x28\x00\x84\xc8\x28\x00",
	"\x7c\xb7\x38\x00\xa4\xb8\x38\x00",
	"\x04\xc7\x2a\x00\xbc\xc7\x2a\x00",
	"\xc8\xc7\x2a\x00\x7c\xc8\x2a\x00",
	"\xa4\xb3\x37\x00\x6c\xb4\x37\x00",
	"\xac\xc8\x2a\x00\x5c\xcc\x2a\x00",
	"\x64\xa7\x27\x00\x78\xa8\x27\x00",
	"\xac\xa8\x27\x00\xe8\xa9\x27\x00",
	"\xc4\xcc\x2a\x00\xe4\xd1\x2a\x00",
	"\x1c\xaa\x27\x00\x24\xac\x27\x00",
	"\xa4\x4a\x39\x00\x8c\x4b\x39\x00",
	"\x9c\xb4\x37\x00\xf4\xb7\x37\x00",
	"\xa4\xfd\x25\x00\x88\xfe\x25\x00",
	"\xcc\x4b\x39\x00\xdc\x4c\x39\x00",
	"\x0c\xc9\x28\x00\x94\xc9\x28\x00",
	"\x74\xac\x27\x00\x3c\xad\x27\x00",
	"\x6c\xad\x27\x00\xa4\xae\x27\x00",
	"\xa0\xc9\x28\x00\xac\xca\x28\x00",
	"\xd4\xae\x27\x00\xa4\xaf\x27\x00",
	"\x34\x34\x38\x00\x78\x37\x38\x00",
	"\x28\xb8\x37\x00\x18\xba\x37\x00",
	"\xa8\x4d\x39\x00\x5c\x4e\x39\x00",
	"\xec\xca\x28\x00\x50\xcb\x28\x00",
	"\xb4\xe0\x29\x00\x4c\xe2\x29\x00",
	"\xd4\xaf\x27\x00\x5c\xb0\x27\x00",
	"\xe4\xfe\x25\x00\x60\xff\x25\x00",
	"\x14\xd6\x2a\x00\x80\xd7\x2a\x00",
	"\xf8\x11\x24\x00\x84\x12\x24\x00",
	"\x3c\xb4\x27\x00\x6c\xb5\x27\x00",
	"\x28\x19\x22\x00\xf8\x19\x22\x00",
	"\xb4\x12\x24\x00\x34\x14\x24\x00",
	"\xec\x9c\x20\x00\xc8\x9d\x20\x00",
	"\xf8\x9d\x20\x00\x80\x9e\x20\x00",
	"\x44\x19\x24\x00\x2c\x1b\x24\x00",
	"\x20\xb8\x27\x00\xe4\xba\x27\x00",
	"\xb0\x9e\x20\x00\x30\xa3\x20\x00",
	"\x18\xe7\x29\x00\xec\xe7\x29\x00",
	"\x50\x14\x16\x00\x04\x0f\x35\x00",
	"\x00\x1f\x24\x00\xc8\x22\x24\x00",
	"\xc4\x62\x1a\x00\x58\x6c\x1a\x00",
	"\xac\x08\x1d\x00\x88\x0b\x1d\x00",
	"\x70\xae\x20\x00\xf0\xbd\x20\x00",
	"\x20\x1a\x22\x00\x74\x1b\x22\x00",
	"\xbc\xcb\x28\x00\x30\xce\x28\x00",
	"\xc8\xcb\x27\x00\xb8\xce\x27\x00",
	"\x84\xd8\x1e\x00\x68\xdb\x1e\x00",
	"\xf4\x6d\x1a\x00\x58\x7c\x1a\x00",
	"\x04\x0d\x1d\x00\xd4\x15\x1d\x00",
	"\x18\x7e\x1a\x00\xe8\x88\x1a\x00",
	"\x5c\x8a\x1a\x00\x2c\x9c\x1a\x00",
	"\x54\x9f\x1a\x00\x28\xa4\x1a\x00",
	"\xbc\xa5\x1a\x00\x1c\xa9\x1a\x00",
	"\x38\xa9\x1a\x00\x6c\xa9\x1a\x00",
	"\x5c\x34\x22\x00\xb8\x45\x22\x00",
	"\xc4\x20\x1d\x00\xbc\x21\x1d\x00",
	"\x5c\x09\x1f\x00\x90\x09\x1f\x00",
	"\xc8\xa9\x1a\x00\xf4\xad\x1a\x00",
	"\xb0\xae\x1a\x00\xc8\xaf\x1a\x00",
	"\xe4\xaf\x1a\x00\x88\xb4\x1a\x00",
	"\xf0\xb4\x1a\x00\x04\xb7\x1a\x00",
	"\x0c\xb7\x1a\x00\x9c\xb9\x1a\x00",
	"\x58\x4b\x22\x00\x08\x50\x22\x00",
	"\x38\x51\x22\x00\x24\x55\x22\x00",
	"\xcc\xb9\x1a\x00\xc0\xbd\x1a\x00",
	"\x84\x24\x1d\x00\x78\x25\x1d\x00",
	"\xe8\x52\x24\x00\x94\x57\x33\x00",
	"\x3c\x31\x1d\x00\x60\x33\x1d\x00",
	"\xec\x56\x22\x00\xc8\x57\x22\x00",
	"\x04\x58\x22\x00\xf8\x5e\x22\x00",
	"\xe0\x53\x24\x00\xe0\x55\x24\x00",
	"\x34\x0f\x1f\x00\xa4\x0f\x1f\x00",
	"\x6c\xcf\x20\x00\x80\xd2\x20\x00",
	"\xbc\x0f\x1f\x00\x6c\x11\x1f\x00",
	"\x90\x33\x1d\x00\xec\x36\x1d\x00",
	"\xdc\xcb\x1a\x00\x48\xcd\x1a\x00",
	"\x60\x3f\x1d\x00\xa4\x40\x1d\x00",
	"\x34\x07\x1e\x00\x18\x96\x1f\x00",
	"\x98\x20\x16\x00\x60\x08\x35\x00",
	"\xec\x96\x18\x00\x18\x98\x18\x00",
	"\x34\xdf\x20\x00\x4c\xe0\x20\x00",
	"\xd8\x0e\x29\x00\xf8\x0f\x29\x00",
	"\x04\xfc\x27\x00\x50\xfc\x27\x00",
	"\x44\x01\x19\x00\x7c\x01\x19\x00",
	"\xe0\x44\x1d\x00\x04\x4a\x1d\x00",
	"\x5c\x58\x26\x00\xcc\x59\x26\x00",
	"\xec\xb3\x16\x00\x4c\xb8\x16\x00",
	"\x28\x23\x16\x00\x28\x2c\x16\x00",
	"\x80\x2e\x1f\x00\xbc\x32\x1f\x00",
	"\x18\x88\x22\x00\xd0\x89\x22\x00",
	"\xcc\xd7\x1a\x00\x6c\xd9\x1a\x00",
	"\xa4\xd9\x1a\x00\x8c\xe4\x1b\x00",
	"\x5c\x3a\x1f\x00\xa4\x3b\x1f\x00",
	"\x54\x98\x18\x00\xb4\x99\x18\x00",
	"\xb0\x17\x29\x00\x6c\x19\x29\x00",
	"\xbc\x19\x29\x00\xd4\x19\x29\x00",
	"\x84\xe9\x20\x00\x2c\xeb\x20\x00",
	"\x48\x0b\x1e\x00\x38\x0d\x1e\x00",
	"\x70\xda\x1a\x00\xb8\xdb\x1a\x00",
	"\xec\x99\x18\x00\xa8\x9f\x18\x00",
	"\x10\xdc\x1a\x00\x98\xde\x1a\x00",
	"\x50\x48\x1f\x00\x34\x4a\x1f\x00",
	"\x84\x2c\x16\x00\x20\x04\x35\x00",
	"\xac\xb8\x16\x00\xf0\xbb\x16\x00",
	"\x50\xec\x20\x00\x88\xf0\x20\x00",
	"\x9c\xeb\x1a\x00\xc8\xee\x1a\x00",
	"\x3c\x90\x24\x00\x40\x90\x24\x00",
	"\xd4\x9f\x18\x00\xe4\xa3\x18\x00",
	"\x98\xef\x1a\x00\xbc\xf0\x1a\x00",
	"\x30\x2e\x16\x00\x34\x01\x35\x00",
	"\x14\x64\x1d\x00\x30\x67\x1d\x00",
	"\xf4\x12\x2b\x00\x34\x16\x2b\x00",
	"\xdc\x8f\x22\x00\x0c\x93\x22\x00",
	"\x68\x93\x22\x00\xd8\x95\x22\x00",
	"\x34\xbc\x16\x00\x64\xbe\x16\x00",
	"\x84\x01\x19\x00\x90\x02\x19\x00",
	"\x94\x01\x28\x00\xe0\x02\x28\x00",
	"\x30\xa4\x18\x00\x3c\xa6\x18\x00",
	"\x28\x96\x22\x00\x5c\x97\x22\x00",
	"\x60\x97\x22\x00\x64\x98\x22\x00",
	"\x60\x92\x24\x00\x98\xea\x34\x00",
	"\xe8\x51\x1f\x00\xcc\x52\x1f\x00",
	"\x94\xf2\x20\x00\x34\xf5\x20\x00",
	"\x60\xa6\x18\x00\xb8\xa8\x18\x00",
	"\xa8\xf5\x1a\x00\xdc\x28\x34\x00",
	"\x20\x34\x16\x00\xc0\x0b\x35\x00",
	"\x4c\x35\x16\x00\xc0\x37\x16\x00",
	"\x9c\x98\x22\x00\x88\x99\x22\x00",
	"\x08\x38\x16\x00\x14\x38\x16\x00",
	"\xb8\x6c\x1d\x00\x94\x6e\x1d\x00",
	"\xe0\xa8\x18\x00\x2c\xb1\x18\x00",
	"\x94\x99\x22\x00\x50\x9b\x22\x00",
	"\x74\x9b\x22\x00\x38\x9c\x22\x00",
	"\x50\xfc\x20\x00\xe0\xfd\x20\x00",
	"\x48\x9c\x22\x00\x7c\x9f\x22\x00",
	"\x18\x38\x16\x00\x2c\x0b\x35\x00",
	"\x10\xfe\x20\x00\x3c\xff\x20\x00",
	"\xc0\x02\x19\x00\xb0\x04\x19\x00",
	"\x88\x9f\x22\x00\x50\xa4\x22\x00",
	"\x64\xa1\x24\x00\x1c\xa5\x24\x00",
	"\x60\xff\x20\x00\x54\x01\x21\x00",
	"\xc4\xa4\x22\x00\xf0\xa6\x22\x00",
	"\x88\x3a\x16\x00\x7c\x01\x35\x00",
	"\x00\x3b\x16\x00\xa0\x3c\x16\x00",
	"\xdc\x3c\x16\x00\x4c\x3e\x16\x00",
	"\x94\x3e\x16\x00\x60\xfd\x34\x00",
	"\x20\xa7\x22\x00\x5c\xaa\x22\x00",
	"\x6c\x96\x26\x00\x7c\x96\x26\x00",
	"\x0c\x0e\x28\x00\x34\x0e\x28\x00",
	"\x14\x41\x16\x00\xac\x0f\x35\x00",
	"\x18\xb2\x18\x00\xd8\xb4\x18\x00",
	"\x14\xb5\x18\x00\x68\xb7\x18\x00",
	"\xa4\xb7\x18\x00\x28\xb9\x18\x00",
	"\xd8\x7b\x1d\x00\xac\x7e\x1d\x00",
	"\x20\x7f\x1d\x00\x8c\x7f\x1d\x00",
	"\xec\xf7\x18\x00\xfc\xfa\x18\x00",
	"\xc8\x45\x16\x00\xec\x45\x16\x00",
	"\x64\xb9\x18\x00\x14\xbf\x18\x00",
	"\xc8\x2f\x1b\x00\xc4\x33\x1b\x00",
	"\xc8\x03\x21\x00\x50\x06\x21\x00",
	"\x1c\x46\x16\x00\x4c\x47\x16\x00",
	"\x08\x8d\x1d\x00\x48\x8d\x1d\x00",
	"\x8c\x3a\x1b\x00\xb0\x3c\x1b\x00",
	"\x80\x0a\x21\x00\xb4\x0c\x21\x00",
	"\x1c\x0d\x21\x00\x84\x10\x21\x00",
	"\x30\x11\x21\x00\x68\x12\x21\x00",
	"\xd0\x12\x21\x00\xf0\x14\x21\x00",
	"\x2c\xab\x22\x00\xe0\xad\x22\x00",
	"\x08\xbd\x24\x00\x24\xbe\x24\x00",
	"\xec\x3c\x1b\x00\x60\x3d\x1b\x00",
	"\x30\xae\x22\x00\x48\xb1\x22\x00",
	"\x04\x90\x1d\x00\xf8\x97\x1d\x00",
	"\x8c\x6a\x38\x00\x08\x6b\x38\x00",
	"\x6c\x47\x16\x00\x70\x47\x16\x00",
	"\x6c\xbf\x18\x00\xdc\xc1\x18\x00",
	"\x60\x1a\x16\x00\x1c\x20\x16\x00",
	"\x74\x47\x16\x00\x78\x47\x16\x00",
	"\x7c\x47\x16\x00\xb0\x48\x16\x00",
	"\x1c\xc2\x18\x00\x04\xc3\x18\x00",
	"\xe0\x48\x16\x00\xd0\x4a\x16\x00",
	"\x90\xb1\x22\x00\x64\xb6\x22\x00",
	"\x0c\x4b\x16\x00\xcc\x4f\x16\x00",
	"\x74\x50\x16\x00\x40\x51\x16\x00",
	"\x60\x54\x1b\x00\x98\x56\x1b\x00",
	"\x88\x51\x16\x00\xdc\x51\x16\x00",
	"\xb4\x69\x1f\x00\x6c\x70\x1f\x00",
	"\xec\x51\x16\x00\xc4\x54\x16\x00",
	"\x38\x55\x16\x00\x54\x56\x16\x00",
	"\x88\x16\x21\x00\x3c\x17\x21\x00",
	"\x94\x70\x1f\x00\x54\x71\x1f\x00",
	"\xa0\x18\x21\x00\x48\x1a\x21\x00",
	"\x6c\x1a\x21\x00\x30\x1b\x21\x00",
	"\x80\x71\x1f\x00\x84\x74\x1f\x00",
	"\xa4\xd7\x22\x00\x74\xd9\x22\x00",
	"\x84\x56\x16\x00\x48\x59\x16\x00",
	"\xec\x64\x1b\x00\xe8\x01\x35\x00",
	"\x78\x59\x16\x00\x68\x5b\x16\x00",
	"\x84\x05\x23\x00\xd4\x06\x23\x00",
	"\x0c\x9a\x1d\x00\x10\x9d\x1d\x00",
	"\x9c\x1d\x21\x00\x04\x1e\x21\x00",
	"\x10\xc9\x24\x00\x48\xcd\x24\x00",
	"\x34\xc3\x18\x00\xe4\xc5\x18\x00",
	"\x14\xc6\x18\x00\x64\xc9\x18\x00",
	"\x90\xc9\x18\x00\x8c\xcb\x18\x00",
	"\xb8\xcb\x18\x00\x1c\xcf\x18\x00",
	"\xa4\x5b\x16\x00\xe8\x5f\x16\x00",
	"\x4c\x60\x16\x00\x48\x63\x16\x00",
	"\x74\x63\x16\x00\x8c\x64\x16\x00",
	"\xbc\x64\x16\x00\x0c\x68\x16\x00",
	"\x80\xcf\x18\x00\x4c\xd1\x18\x00",
	"\x50\x68\x16\x00\xcc\x69\x16\x00",
	"\x00\x6a\x16\x00\xec\x6a\x16\x00",
	"\x0c\xb2\x1d\x00\xc8\xb6\x1d\x00",
	"\x18\x6b\x16\x00\xd8\x6e\x16\x00",
	"\x90\xd1\x18\x00\xc8\xd5\x18\x00",
	"\xe0\xd9\x22\x00\xbc\xdc\x22\x00",
	"\x1c\xdd\x22\x00\xcc\xdd\x22\x00",
	"\x3c\xde\x22\x00\xb4\xdf\x22\x00",
	"\x1c\xd6\x18\x00\x44\x16\x16\x00",
	"\x0c\x6f\x16\x00\x84\x71\x16\x00",
	"\x5c\xd7\x18\x00\xe8\xda\x18\x00",
	"\x10\xc6\x1d\x00\x7c\xc7\x1d\x00",
	"\x48\xd7\x18\x00\x58\xd7\x18\x00",
	"\xd4\x28\x2b\x00\xf8\x28\x2b\x00",
	"\x68\x1d\x28\x00\xa0\x1e\x28\x00",
	"\xb0\xc8\x1d\x00\xbc\xca\x1d\x00",
	"\x28\xdb\x18\x00\xbc\xde\x18\x00",
	"\x24\x87\x1b\x00\x38\x87\x1b\x00",
	"\x84\x7d\x1f\x00\xe4\x80\x1f\x00",
	"\xd4\xd0\x24\x00\x20\xd3\x24\x00",
	"\xec\xdf\x22\x00\xe4\xe1\x22\x00",
	"\x5c\xe2\x22\x00\x38\xe4\x22\x00",
	"\x28\xd1\x26\x00\xa4\xd5\x26\x00",
	"\x00\xdf\x18\x00\x0c\xe2\x18\x00",
	"\x7c\x0d\x1e\x00\xd0\x0e\x1e\x00",
	"\x94\x7c\x16\x00\xa0\x7f\x16\x00",
	"\x04\xdf\x1d\x00\xd8\xe0\x1d\x00",
	"\x70\x38\x28\x00\x24\x39\x28\x00",
	"\x18\x80\x16\x00\x30\x81\x16\x00",
	"\x58\x81\x16\x00\xc4\x84\x16\x00",
	"\x8c\xe2\x18\x00\x64\xe7\x18\x00",
	"\xa8\xe7\x18\x00\xd0\xe9\x18\x00",
	"\x04\x85\x16\x00\xc4\x88\x16\x00",
	"\x60\x81\x1f\x00\x24\x84\x1f\x00",
	"\xf0\x88\x16\x00\x24\x8a\x16\x00",
	"\x48\x53\x29\x00\x68\x53\x29\x00",
	"\x04\xea\x18\x00\x08\xea\x18\x00",
	"\x2c\xed\x22\x00\x40\xef\x22\x00",
	"\x90\x8a\x16\x00\x3c\x8c\x16\x00",
	"\xb8\x2a\x21\x00\xc4\x2d\x21\x00",
	"\x0c\xea\x18\x00\xc8\xeb\x18\x00",
	"\x30\xec\x18\x00\x6c\xf0\x18\x00",
	"\x28\xdf\x24\x00\xbc\xdf\x24\x00",
	"\xa4\xf0\x18\x00\x88\xf4\x18\x00",
	"\x8c\x8c\x16\x00\x54\x91\x16\x00",
	"\x08\xf5\x18\x00\xc4\xf5\x18\x00",
	"\x44\x84\x1f\x00\xe0\x84\x1f\x00",
	"\xc8\x91\x16\x00\xe4\x95\x16\x00",
	"\x84\x3e\x28\x00\x90\x3f\x28\x00",
	"\x94\x3f\x28\x00\x50\x40\x28\x00",
	"\xdc\x40\x28\x00\x88\x42\x28\x00",
	"\x14\x96\x16\x00\x94\x9b\x16\x00",
	"\xb8\xde\x26\x00\x1c\xe0\x26\x00",
	"\x70\xb6\x1b\x00\xd0\xb6\x1b\x00",
	"\xdc\xb6\x1b\x00\x28\xba\x1b\x00",
	"\x08\x9c\x16\x00\x20\x9d\x16\x00",
	"\x0c\xbc\x1b\x00\x24\xbe\x1b\x00",
	"\x60\x9d\x16\x00\x84\x9f\x16\x00",
	"\x2c\xfb\x1d\x00\x00\x00\x00\x00",
	"\x3c\x85\x1f\x00\x64\x87\x1f\x00",
	"\xa8\xfb\x1d\x00\xc4\xfd\x1d\x00",
	"\xe8\x9f\x16\x00\xc0\xa3\x16\x00",
	"\xfc\xa3\x16\x00\xa8\xa5\x16\x00",
	"\xe8\xed\x1b\x00\x04\xf1\x1b\x00",
	"\x34\xe4\x24\x00\xc0\xe4\x24\x00",
	"\x98\xc4\x1b\x00\xcc\xc6\x1b\x00",
	"\x2c\xf1\x1b\x00\x88\xf1\x1b\x00",
	"\x94\x2f\x21\x00\x0c\x72\x35\x00",
	"\xc4\x8c\x1f\x00\x74\x8f\x1f\x00",
	"\xc8\xc0\x16\x00\x64\x85\x36\x00",
	"\x24\xef\x24\x00\x44\xef\x24\x00",
	"\x8c\x31\x21\x00\x68\x33\x21\x00",
	"\x7c\x49\x28\x00\x0c\x4b\x28\x00",
	"\xd8\x8f\x1f\x00\xa4\x90\x1f\x00",
	"\xc8\xa5\x16\x00\xbc\xa8\x16\x00",
	"\x2c\x4c\x28\x00\x08\x4f\x28\x00",
	"\x40\x4f\x28\x00\xcc\x4f\x28\x00",
	"\xb4\x8b\x29\x00\x84\x8d\x29\x00",
	"\xd4\x90\x1f\x00\x68\x96\x1f\x00",
	"\x08\x70\x2a\x00\x14\x71\x2a\x00",
	"\x00\x03\x23\x00\xe0\x03\x23\x00",
	"\x5c\xa9\x16\x00\xd8\xad\x16\x00",
	"\x28\xfb\x18\x00\x30\xfc\x18\x00",
	"\x4c\xfc\x18\x00\x1c\xfe\x18\x00",
	"\x4c\xfe\x18\x00\x18\x01\x19\x00",
	"\x6c\xae\x16\x00\xa0\xb2\x16\x00",
	"\xc8\x96\x1f\x00\x4c\x98\x1f\x00",
	"\xd8\x0a\x1c\x00\xcc\x20\x1c\x00",
	"\x5c\x37\x25\x00\xd4\x37\x25\x00",
	"\x28\x3f\x27\x00\xbc\x40\x27\x00",
	"\xf4\x3c\x21\x00\x50\x3d\x21\x00",
	"\x18\x38\x25\x00\x1c\x3a\x25\x00",
	"\xd8\x0e\x23\x00\xa0\x11\x23\x00",
	"\xdc\x3e\x21\x00\xcc\x42\x21\x00",
	"\xc8\x43\x21\x00\x40\x46\x21\x00",
	"\x78\x46\x21\x00\x70\x70\x34\x00",
	"\xb8\x28\x1c\x00\xb8\x2b\x1c\x00",
	"\xb0\x12\x1e\x00\x0c\x16\x1e\x00",
	"\x50\xf9\x26\x00\x8c\xf9\x26\x00",
	"\x80\x13\x23\x00\x60\x14\x23\x00",
	"\x94\x16\x1e\x00\x0c\x17\x1e\x00",
	"\x44\x53\x21\x00\x7c\x57\x21\x00",
	"\x2c\x4e\x25\x00\xfc\x4e\x25\x00",
	"\x88\x14\x23\x00\x80\x15\x23\x00",
	"\x34\x17\x1e\x00\x2c\x18\x1e\x00",
	"\xa8\x15\x23\x00\x08\x17\x23\x00",
	"\x2c\x4f\x25\x00\x90\x50\x25\x00",
	"\x38\x58\x21\x00\x84\x59\x21\x00",
	"\x3c\x17\x23\x00\x2c\x18\x23\x00",
	"\x70\x18\x1e\x00\x00\x1a\x1e\x00",
	"\xb8\x71\x29\x00\x58\x74\x29\x00",
	"\x94\x74\x29\x00\x40\x16\x16\x00",
	"\xc4\x8c\x2a\x00\x40\x16\x16\x00",
	"\x30\x1a\x1e\x00\xbc\x1a\x1e\x00",
	"\xec\xf0\x1f\x00\x40\x16\x16\x00",
	"\x38\xf1\x1f\x00\x80\xf1\x1f\x00",
	"\x00\x52\x25\x00\x60\x54\x25\x00",
	"\x38\x03\x27\x00\x80\x03\x27\x00",
	"\x14\x5a\x21\x00\xc8\x5e\x21\x00",
	"\x5c\x56\x25\x00\x90\x59\x25\x00",
	"\xac\x03\x27\x00\x7c\x05\x27\x00",
	"\x84\xf1\x1f\x00\xb4\xf2\x1f\x00",
	"\x00\x71\x28\x00\x24\x72\x28\x00",
	"\xb8\x05\x27\x00\xec\x0d\x27\x00",
	"\xa8\x5f\x21\x00\xcc\x62\x21\x00",
	"\x20\x19\x23\x00\xe0\x1c\x23\x00",
	"\x60\x63\x21\x00\x80\x65\x21\x00",
	"\xf8\x1d\x23\x00\x00\x20\x23\x00",
	"\x6c\x20\x23\x00\x74\x22\x23\x00",
	"\xe0\x22\x23\x00\x0c\x7c\x36\x00",
	"\x44\x18\x19\x00\x2c\x26\x19\x00",
	"\x78\x2d\x1e\x00\x08\x2e\x1e\x00"
]

actor_count = 0x1DB

actors = {
    "OoT3D": [{} for _ in range(actor_count)]
}

if False:
    with open("./code.bin", 'rb') as rom:
        s = rom.read()
        
        for actorId in range(len(actor_strings_search)):
            print(actorId)
            addr = s.find(actor_strings_search[actorId])
            actorId, actorType, room, flags, objectId, _, instanceSize, initPtr, destroyPtr, updatePtr, drawPtr = struct.unpack('<HBBIHHIIIII',s[addr-0x10:addr+0x10])
            #print(hex(actorId), hex(actorType), hex(room), hex(flags), hex(objectId), hex(instanceSize), hex(init), hex(destroy), hex(update), hex(draw))
            
            actorInfo = {'actorId':actorId,'actorType':actorType,'room':room,'objectId':objectId,'instanceSize':instanceSize,'name':actorList[actorId][0],'description':actorList[actorId][1],'initPtr':initPtr,'destroyPtr':destroyPtr,'updatePtr':updatePtr,'drawPtr':drawPtr}
            
            actors["OoT3D"][actorId] = actorInfo
        
    f0 = open('actors.json','w')
    f0.writelines(json.dumps(actors))
    f0.close()

###################
#export scene data#
###################
if False:
    versions = ["OoT3D-US", "OoT3D-US-MQ"]
    
    SceneList = [
        ["ydan", "Inside the Deku Tree"],
        ["ddan", "Dodongo's Cavern"],
        ["bdan", "Inside Jabu-Jabu's Belly"],
        ["bmori1", "Forest Temple"],
        ["hidan", "Fire Temple"],
        ["mizusin", "Water Temple"],
        ["jyasinzou", "Spirit Temple"],
        ["hakadan", "Shadow Temple"],
        ["hakadan_ch", "Bottom of the Well"],
        ["ice_doukutu", "Ice Cavern"],
        ["ganon", "Ganon's Tower"],
        ["men", "Gerudo Training Ground"],
        ["gerudoway", "Thieves' Hideout"],
        ["ganontika", "Inside Ganon's Castle"],
        ["ganon_sonogo", "Ganon's Tower (Collapsing)"],
        ["ganontikasonogo", "Inside Ganon's Castle (Collapsing)"],
        ["takaraya", "Treasure Chest Shop"],
        ["ydan_boss", "Gohma's Lair"],
        ["ddan_boss", "King Dodongo's Lair"],
        ["bdan_boss", "Barinade's Lair"],
        ["moriboss", "Phantom Ganon's Lair"],
        ["fire_bs", "Volvagia's Lair"],
        ["mizusin_boss", "Morpha's Lair"],
        ["jyasinzou_boss", "Twinrova's Lair & Iron Knuckle Mini-Boss Room"],
        ["hakadan_boss", "Bongo Bongo's Lair"],
        ["ganon_boss", "Ganondorf's Lair"],
        ["ganon_final", "Ganondorf's Death Scene (Tower Escape Exterior)"],
        ["entra_day", "Market Entrance (Child - Day)"],
        ["entra_night", "Market Entrance (Child - Night)"],
        ["entra_ruins", "Market Entrance (Ruins)"],
        ["market_alley", "Back Alley (Day)"],
        ["market_alley_n", "Back Alley (Night)"],
        ["market_day", "Market (Child - Day)"],
        ["market_night", "Market (Child - Night)"],
        ["market_ruins", "Market (Ruins)"],
        ["shrine", "Temple of Time Exterior (Day)"],
        ["shrine_n", "Temple of Time Exterior (Night)"],
        ["shrine_r", "Temple of Time Exterior (Ruins)"],
        ["k_home", "Know-It-All Brothers' House"],
        ["k_home3", "Twins' House"],
        ["k_home4", "Mido's House"],
        ["k_home5", "Saria's House"],
        ["kakariko", "Carpenter Boss's House"],
        ["kakariko_home3", "Back Alley House (Man in Green)"],
        ["shop", "Bazaar"],
        ["kokiri", "Kokiri Shop"],
        ["shop_golon", "Goron Shop"],
        ["zoora", "Zora Shop"],
        ["shop_drag", "Kakariko Potion Shop"],
        ["shop_alley", "Market Potion Shop"],
        ["shop_night", "Bombchu Shop"],
        ["shop_face", "Happy Mask Shop"],
        ["link", "Link's House"],
        ["kakariko_impa", "Back Alley House (Dog Lady)"],
        ["stable", "Stable"],
        ["labo", "Impa's House"],
        ["hylia_labo", "Lakeside Laboratory"],
        ["tent", "Carpenters' Tent"],
        ["hut", "Gravekeeper's Hut"],
        ["daiyousei_izumi", "Great Fairy's Fountain (Upgrades)"],
        ["yousei_izumi_tate", "Fairy's Fountain (Healing Fairies)"],
        ["yousei_izumi_yoko", "Great Fairy's Fountain (Spells)"],
        ["kakusiana", "Grottos"],
        ["hakaana", "Grave (Redead)"],
        ["hakaana2", "Grave (Fairy's Fountain)"],
        ["hakaana_ouke", "Royal Family's Tomb"],
        ["syatekijyou", "Shooting Gallery"],
        ["tokinoma", "Temple of Time"],
        ["kenjyanoma", "Chamber of the Sages"],
        ["hairal_niwa", "Castle Hedge Maze (Day)"],
        ["hairal_niwa_n", "Castle Hedge Maze (Night)"],
        ["hiral_demo", "Cutscene Map"],
        ["hakasitarelay", "Damp√©'s Grave & Windmill"],
        ["turibori", "Fishing Pond"],
        ["nakaniwa", "Castle Courtyard"],
        ["bowling", "Bombchu Bowling Alley"],
        ["souko", "Lon Lon Ranch House & Tower"],
        ["miharigoya", "Guard House"],
        ["mahouya", "Granny's Potion Shop"],
        ["ganon_demo", "Ganon's Tower Collapse & Battle Arena"],
        ["kinsuta", "House of Skulltula"],
        ["spot00", "Spot 00 - Hyrule Field"],
        ["spot01", "Spot 01 - Kakariko Village"],
        ["spot02", "Spot 02 - Graveyard"],
        ["spot03", "Spot 03 - Zora's River"],
        ["spot04", "Spot 04 - Kokiri Forest"],
        ["spot05", "Spot 05 - Sacred Forest Meadow"],
        ["spot06", "Spot 06 - Lake Hylia"],
        ["spot07", "Spot 07 - Zora's Domain"],
        ["spot08", "Spot 08 - Zora's Fountain"],
        ["spot09", "Spot 09 - Gerudo Valley"],
        ["spot10", "Spot 10 - Lost Woods"],
        ["spot11", "Spot 11 - Desert Colossus"],
        ["spot12", "Spot 12 - Gerudo's Fortress"],
        ["spot13", "Spot 13 - Haunted Wasteland"],
        ["spot15", "Spot 15 - Hyrule Castle"],
        ["spot16", "Spot 16 - Death Mountain Trail"],
        ["spot17", "Spot 17 - Death Mountain Crater"],
        ["spot18", "Spot 18 - Goron City"],
        ["spot20", "Spot 20 - Lon Lon Ranch"],
        ["ganon_tou", "Ganon's Castle Exterior"],
        ["test01", "Room 118 - Jungle Gym"],
        ["besitu", "Room 116 - Ganondorf Test Room"],
        ["depth_test", "Room 124 - Depth Test"],
        ["syotes", "Room 120 - Stalfos Mini-Boss Room"],
        ["syotes2", "Room 121 - Stalfos Boss Room"],
        ["sutaru", "Room 122 - Sutaru"],
        ["spot99", "Spot 99 - Hyrule Field (Title)"],
        ["hairal_niwa2", "Room 125 - Castle Hedge Maze (Early)"],
        ["sasatest", "Room 117 - Sasa Test"],
        ["testroom", "Room 119 - Treasure Chest Room"]
    ];

    export_csv = False
    export_json = False

    scenes = {
        "OoT3D-US": [{} for _ in range(0x6F)],
        "OoT3D-US-MQ": [{} for _ in range(0x6F)]
    }


    # Open Scene files
    for version in versions:
        for sceneId in range(len(SceneList)):
            scene_name = SceneList[sceneId][0]
            
            if version == "OoT3D-US-MQ":
                scene_path = "./scene/" + scene_name + "_dd_info.zsi"
            else:
                scene_path = "./scene/" + scene_name + "_info.zsi"
            
            scenes[version][sceneId] = [None] * 4
            if os.path.isfile(scene_path) == False:
                continue

            with open(scene_path, 'rb') as f:
                sceneAltHeaders = None
                roomAltHeaders = {}

                sceneFile = f.read()
                
                setupId = 0
                for setupId in range(4):
                    #print("setup "+str(setupId))
                
                    if setupId == 0:
                        scenes[version][sceneId][setupId] = {'rooms':[],'transitionActors':[],'specialObject':0}
                    else:
                        if sceneAltHeaders and sceneAltHeaders[setupId-1]:
                            scenes[version][sceneId][setupId] = {'rooms':[],'transitionActors':[],'specialObject':0}
                            sceneHeaderStart = sceneAltHeaders[setupId-1]
                        else:
                            scenes[version][sceneId][setupId] = None
                            continue
                    
                    sceneHeaderCommand = None
                    sceneHeaderNum = 0
                    while sceneHeaderCommand != 0x14:
                        sceneHeaderCommand, sceneParam1, _, sceneParam2 = struct.unpack('<BBHI',sceneFile[0x10+8*sceneHeaderNum:0x10+8*(sceneHeaderNum+1)])
                        #print(hex(sceneHeaderCommand), hex(sceneParam1), _, hex(sceneParam2))
                        
                        assert sceneHeaderCommand < 0x1F
                        if sceneHeaderCommand == 0x18: # Alternate Headers
                            sceneSetupListStart = sceneParam2
                            #print(hex(sceneSetupListStart))
                            
                            sceneAltHeaders = struct.unpack('<III', sceneFile[0x10+sceneSetupListStart:0x10+sceneSetupListStart+0xC]) # we only care about setups 0-3
                            #print sceneAltHeaders
                            
                            '''sceneAltHeaders = []
                            
                            setup = 0
                            while setup < sceneParam1:
                                sceneAltHeaders.append(struct.unpack('<I',sceneFile[0x10+sceneSetupListStart+0x4*setup:0x10+sceneSetupListStart+0x4*setup+4])[0])
                                setup += 1'''
                            
                            #print(sceneAltHeaders)
                            #for s in sceneAltHeaders:
                            #    print(hex(s))
                        elif sceneHeaderCommand == 0x04: # Rooms
                            for roomId in range(sceneParam1):
                                if version == "OoT3D-US-MQ":
                                    roomPath="./scene/"+scene_name+"_"+str(roomId)+"_dd_info.zsi"
                                else:
                                    roomPath="./scene/"+scene_name+"_"+str(roomId)+"_info.zsi"
                                f2=open(roomPath,'rb')
                                #print("./scene/"+scene_name+"_"+str(roomId)+"_info.zsi")
                                roomFile = f2.read()
                                roomData = {'actors':[],'objects':[]}
                                
                                if setupId == 0:
                                    roomHeaderStart = 0
                                else:
                                    assert(roomAltHeaders[roomId][setupId-1])
                                    roomHeaderStart = roomAltHeaders[roomId][setupId-1]
                                
                                roomHeaderCommand = None
                                roomHeaderNum = 0
                                while roomHeaderCommand != 0x14:
                                    roomHeaderCommand, roomParam1, _, roomParam2 = struct.unpack('<BBHI',roomFile[0x10+roomHeaderStart+8*roomHeaderNum:0x10+roomHeaderStart+8*(roomHeaderNum+1)])
                                    #print(hex(roomHeaderCommand), hex(roomParam1), _, hex(roomParam2))

                                    if roomHeaderCommand == 0x18: # Alternate Headers
                                        roomSetupListStart = roomParam2
                                        roomAltHeaders[roomId] = struct.unpack('<III', roomFile[0x10+roomSetupListStart:0x10+roomSetupListStart+0xC]) # we only care about setups 0-3
                                        
                                    elif roomHeaderCommand == 0x0B: #Object List
                                        for objectNum in range(roomParam1):
                                            objectListStart = roomParam2
                                            obj = struct.unpack('<H',roomFile[0x10+objectListStart+0x2*objectNum:0x10+objectListStart+0x2*(objectNum+1)])[0]
                                            roomData['objects'].append(obj)
                                        
                                    elif roomHeaderCommand == 0x01: #Actor List
                                        for actorNum in range(roomParam1):
                                            actorListStart = roomParam2
                                            actorId, posX, posY, posZ, rotX, rotY, rotZ, actorParams = struct.unpack('<HhhhHHHH',roomFile[0x10+actorListStart+0x10*actorNum:0x10+actorListStart+0x10*(actorNum+1)])
                                            if export_csv:
                                                roomData['actors'].append({'actorId':actorId,'actorParams':actorParams,'position':(posX,posY,posZ),'rotation':(rotX,rotY,rotZ)})
                                            else:
                                                roomData['actors'].append({'actorId':actorId,'actorParams':actorParams,'position':(posX,posY,posZ)})
                                    roomHeaderNum += 1
                                    
                                scenes[version][sceneId][setupId]['rooms'].append(roomData)
                                
                        elif sceneHeaderCommand == 0x0E: # Transition Actors
                            for transitionActorNum in range(sceneParam1):
                                transitionActorListStart = sceneParam2
                                frontRoom, _, backRoom, _, actorId, posX, posY, posZ, rotY, actorParams = struct.unpack('<BBBBHHHHHH',sceneFile[0x10+transitionActorListStart+0x10*transitionActorNum:0x10+transitionActorListStart+0x10*(transitionActorNum+1)])
                                if export_csv:
                                    scenes[version][sceneId][setupId]['transitionActors'].append({'frontRoom':frontRoom,'backRoom':backRoom,'actorId':actorId,'actorParams':actorParams,'position':(posX,posY,posZ),'rotationY':posY})
                                else:
                                    scenes[version][sceneId][setupId]['transitionActors'].append({'frontRoom':frontRoom,'backRoom':backRoom,'actorId':actorId,'actorParams':actorParams,'position':(posX,posY,posZ)})
                                
                        elif sceneHeaderCommand == 0x07: # Special Objects
                            assert sceneParam2 in [0,2,3]
                            scenes[version][sceneId][setupId]['specialObject'] = sceneParam2
                            
                        sceneHeaderNum += 1
                        
                    if sceneAltHeaders:
                        assert len(roomAltHeaders) == len(scenes[version][sceneId][setupId]['rooms'])
                    else:
                        assert len(roomAltHeaders) == 0
            
            print("Scene "+str(sceneId)+" completed...")

    if export_json:
        f3 = open('scenes.json','w')
        f3.writelines(json.dumps(scenes))
        f3.close()

    if export_csv:
        for version in versions:
            if version == "OoT3D-US-MQ":
                f4 = open('actors_by_area_mq.csv','w')
            else:
                f4 = open('actors_by_area.csv','w')
            f4.write("scene,setup,room,actorId,posX,posY,posZ,rotX,rotY,rotZ,actorParams,frontRoom,backRoom,\n")
            for sceneId in range(0, len(SceneList)):
                for setup in range(0, 4):
                    if scenes[version][sceneId][setup] == None:
                        continue
                    for t in scenes[version][sceneId][setup]["transitionActors"]:
                        #print(t)
                        f4.write(str(sceneId)+","+str(setup)+",-1,\""+"{:04X}".format(t["actorId"])+"\","+str(t["position"][0])+","+str(t["position"][1])+","+str(t["position"][2])+",0,"+str(t["rotationY"])+",0,\""+"{:04X}".format(t["actorParams"])+"\","+str(t["frontRoom"])+","+str(t["backRoom"])+",\n")
                for setup in range(0, 4):
                    if scenes[version][sceneId][setup] == None:
                        continue
                    for roomNum, room in enumerate(scenes[version][sceneId][setup]["rooms"]):
                        for a in room["actors"]:
                            f4.write(str(sceneId)+","+str(setup)+","+str(roomNum)+",\""+"{:04X}".format(a["actorId"])+"\","+str(a["position"][0])+","+str(a["position"][1])+","+str(a["position"][2])+","+str(a["rotation"][0])+","+str(a["rotation"][1])+","+str(a["rotation"][2])+",\""+"{:04X}".format(a["actorParams"])+"\",,,\n")
                            
            f4.close()
            
            if version == "OoT3D-US-MQ":
                f5 = open('objects_by_area_mq.csv','w')
            else:
                f5 = open('objects_by_area.csv','w')
            f5.write("scene,setup,room,object,\n")
            for sceneId in range(0, len(SceneList)):
                for setup in range(0, 4):
                    if scenes[version][sceneId][setup] == None:
                        continue
                    for roomNum, room in enumerate(scenes[version][sceneId][setup]["rooms"]):
                        for o in room["objects"]:
                            f5.write(str(sceneId)+","+str(setup)+","+str(roomNum)+",\""+"{:04X}".format(o)+"\",\n")
            f5.close()